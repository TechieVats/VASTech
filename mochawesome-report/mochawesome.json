{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2022-10-26T15:12:39.223Z",
    "end": "2022-10-26T15:12:53.579Z",
    "duration": 14356,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f6f8e5c0-78d0-40fe-b6db-db57499b323e",
      "title": "",
      "fullFile": "cypress/integration/examples/SortByFilter.js",
      "file": "cypress/integration/examples/SortByFilter.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5cd9d716-a082-4041-8bf1-5ea752e01214",
          "title": "Sort by filter Test Suite ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Sort filter to validate high to low and low to high by price",
              "fullTitle": "Sort by filter Test Suite  Sort filter to validate high to low and low to high by price",
              "timedOut": null,
              "duration": 12135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myStore = new _MyStore.default();\nlet expectedLowToHigh = [];\nlet expectedHighToLow = [];\ncy.wait(1000);\nmyStore.getProductPrice().then($prices => Cypress._.map($prices, el => el.innerText)).then(list => list.map(parseFloat)).then(list => {\n  expectedLowToHigh = Cypress._.sortBy(list);\n  expectedHighToLow = Cypress._.sortBy(list).reverse();\n});\ncy.priceSortBy(this.data.sortHighTOLow);\ncy.wait(4000);\nmyStore.getProductPrice().then($prices => Cypress._.map($prices, el => el.innerText)).then(actualList => actualList.map(parseFloat)).then(actualList => {\n  expect(actualList).to.deep.equal(expectedHighToLow);\n});\ncy.wait(1000);\ncy.priceSortBy(this.data.sortLowToHigh);\ncy.wait(4000);\nmyStore.getProductPrice().then($prices => Cypress._.map($prices, el => el.innerText)).then(list1 => list1.map(parseFloat)).then(list1 => {\n  expect(list1).to.deep.equal(expectedLowToHigh);\n});",
              "err": {},
              "uuid": "fe08cea7-b52a-4556-bdba-c2aa64313f5b",
              "parentUUID": "5cd9d716-a082-4041-8bf1-5ea752e01214",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe08cea7-b52a-4556-bdba-c2aa64313f5b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12135,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}